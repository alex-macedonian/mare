#!/usr/bin/env bash
#
# mare - automation of workstation administration under the control of 
# the operating system Debian GNU/Linux 10
# Copyright (C) 2019 - 2020 Alexandre Popov <amocedonian@gmail.com>.
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

#################################
#           VARIABLES           #
#################################

# Variables to support script internationalization
TEXTDOMAINDIR=/usr/share/locale
export TEXTDOMAINDIR
TEXTDOMAIN=mare
export TEXTDOMAIN

#
COMMAND="$1"

# Variable to detect recommended distribution
DETECT=$(lsb_release -d | awk '{print $2, $3, $4}')

# Arrays for a function that installs additional packages
declare -a possible_packages
possible_packages[0]="skype"
possible_packages[1]="chromium"
possible_packages[2]="chromium-l10n"
possible_packages[3]="transmission-gtk"
possible_packages[4]="brasero"
possible_packages[5]="gimp"
possible_packages[6]="blender"
possible_packages[7]="openshot"
possible_packages[8]="audacity"
possible_packages[9]="mixxx"
possible_packages[10]="dmz-cursor-theme"
possible_packages[11]="numix-gtk-theme"
possible_packages[12]="adapta-gtk-theme"
possible_packages[13]="materia-gtk-theme"
possible_packages[14]="numix-icon-theme"
possible_packages[15]="numix-icon-theme-circle"
possible_packages[16]="gnome-brave-icon-theme"
possible_packages[17]="gnome-dust-icon-theme"
possible_packages[18]="gnome-human-icon-theme"
possible_packages[19]="gnome-illustrious-icon-theme"
possible_packages[20]="gnome-noble-icon-theme"
possible_packages[21]="gnome-wine-icon-theme"
possible_packages[22]="gnome-wise-icon-theme"
possible_packages[23]="human-icon-theme"
possible_packages[24]="bleachbit"
possible_packages[25]="catfish"
possible_packages[26]="screenfetch"
possible_packages[27]="inxi"
possible_packages[28]="lshw"
possible_packages[29]="net-tools"
possible_packages[30]="gvfs-backends"
possible_packages[31]="unrar"
possible_packages[32]="lightdm-gtk-greeter-settings"
possible_packages[33]="dconf-editor"
possible_packages[34]="ttf-mscorefonts-installer"
possible_packages[35]="fonts-freefont-ttf"
possible_packages[36]="fonts-noto"
possible_packages[37]="fonts-noto-core"
possible_packages[38]="fonts-noto-extra"

declare -gA language_packs
language_packs["ru_RU.UTF-8",0]="firefox-esr-l10n-ru"
language_packs["ru_RU.UTF-8",1]="libreoffice-help-ru"

declare -gA help_packs
help_packs["ru_RU.UTF-8",0]="libreoffice-help-ru"
help_packs["ru_RU.UTF-8",1]="gimp-help-ru"

# Array for a function that installs additional codecs in the system
declare -a possible_codecs
possible_codecs[0]="libdvdcss2"
possible_codecs[1]="libavcodec58"
possible_codecs[2]="libcodec2-0.8.1"
possible_codecs[3]="libcommons-codec-java"
possible_codecs[4]="libde265-0"
possible_codecs[5]="libopencore-amrnb0"
possible_codecs[6]="libopencore-amrwb0"
possible_codecs[7]="libopus0"
possible_codecs[8]="libspeex1"
possible_codecs[9]="libvpx5"
possible_codecs[10]="libwavpack1"
possible_codecs[11]="libxvidcore4"
possible_codecs[12]="libass9"
possible_codecs[13]="libcrystalhd3"
possible_codecs[14]="libdca0"
possible_codecs[15]="libdv4"
possible_codecs[16]="libdvdnav4"
possible_codecs[17]="libdvdread4"
possible_codecs[18]="libfaad2"
possible_codecs[20]="libflac8"
possible_codecs[21]="libkate1"
possible_codecs[22]="libmjpegutils-2.1-0"
possible_codecs[23]="libmp3lame0"
possible_codecs[24]="libmpcdec6"
possible_codecs[25]="libmpeg2-4"
possible_codecs[26]="libmpg123-0"
possible_codecs[27]="libpostproc55"
possible_codecs[28]="libshine3"
possible_codecs[29]="libshout3"
possible_codecs[30]="libswresample3"
possible_codecs[31]="libswscale5"
possible_codecs[32]="libtag1v5"
possible_codecs[33]="libtagc0"
possible_codecs[34]="libtheora0"
possible_codecs[35]="libtwolame0"
possible_codecs[36]="libvo-aacenc0"
possible_codecs[37]="libvo-amrwbenc0"
possible_codecs[38]="libvorbis0a"
possible_codecs[39]="libx264-155"
possible_codecs[40]="libx265-165"

#################################
# 			FUNCTIONS			#
#################################

# Install micro programs for USB wireless network and Bluetooth
# cards supported by the ar5523, ath3k, ath6kl_sdio,
# ath6kl_usb, ath9k_htc, ath10k, or wilc6210 drivers. 
configure_wireless_network() 
{
	
	local CDROM=$(awk 'FNR == 3 {print $9}' /etc/apt/sources.list)
	local FIRMWARE_ATHEROS_PACKAGE=$(dpkg -l 2> /dev/null | grep firmware-atheros | awk '{print $2}')
	local FIND_FILE=$(find /home -name firmware-atheros*)

	gettext "Configuring a wireless, network interface."; echo

	if [ "$CDROM" = "DVD" ]; then
		# check, if the package is installed
		# if the package is installed, then
		# inform the user about it
		if [ -n "$FIRMWARE_ATHEROS_PACKAGE" ]; then
			gettext "The firmware-atheros package is already installed on your system."; echo
		# otherwise install the package
		else
			if [ -f $FIND_FILE ]; then
				dpkg --install $FIND_FILE
			else
				gettext "mare: the firmware-atheros package is not found."; echo
				exit 1
			fi

			if [ -f /etc/NetworkManager/NetworkManager.conf ]; then
				# edit the /etc/NetworkManager/NetworkManager.conf file
				edit_network_manager_conf
			else
				gettext "mare: the NetworkManager.conf file does not exist."; echo
				exit 1
			fi
			gettext "IT IS VERY IMPORTANT! Restart the computer NOW to apply the changes."; echo
			gettext "Press enter ..."; read	
		fi
	else
		gettext "mare: you are using a different storage medium information."; echo
		exit 1
	fi

}

# Edit the /etc/NetworkManager/NetworkManager.conf file
edit_network_manager_conf() 
{
	
	# Variable for checking the contents of the /etc/NetworkManager/NetworkManager.conf file
	local NET_MANAGER=$(awk 'FNR == 8 {print}' /etc/NetworkManager/NetworkManager.conf)

	if [ -n "$NET_MANAGER" ]; then
		gettext "Random MAC address is already disabled in the NetworkManager."; echo
	else
		sed -i '5a\ ' /etc/NetworkManager/NetworkManager.conf
		sed -i '6a\[device]' /etc/NetworkManager/NetworkManager.conf
		sed -i '7a\wifi.scan-rand-mac-address=no' /etc/NetworkManager/NetworkManager.conf
	fi
	
}

# Create a new Wi-Fi connection in NetworkManager using the nmcli command
create_connection() 
{

	local SSID=0
	local PASWD=0
	local CHECK_IFACE=$(ip a | awk 'FNR == 9 {print $2}' | cut -d":" -f1)

	if [ -n $CHECK_IFACE ]; then
		gettext "Creating a new network connection."; echo; echo
		gettext "Enter the name of the wireless access point: "
		read SSID
		if [ -f /etc/NetworkManager/system-connections/$SSID.* ]; then
			gettext "A new network connection has already been created."; echo
		else
			gettext "Enter the password: "
			read PASWD
			nmcli device wifi connect $SSID password $PASWD > /dev/null
			gettext "A new network connection created."; echo
		fi
	else
		gettext "Error! Wireless, network interface not found."; echo
	fi

}

# Configure elevated user privileges
configure_sudo() 
{
	
	# Variable for checking the contents of the /etc/sudoers file
	local SUDOERS=$(awk 'FNR == 21 {print}' /etc/sudoers 2> /dev/null)
	local NAME=0

	gettext "Enter your username: "
	read NAME
	# check  for the presence of the string username	ALL=(ALL: ALL) ALL
	# if such a line exists, then inform the user about it
	if [ -n "$SUDOERS" ]; then
		gettext "Elevated user privileges are already configured."; echo
	else
		gettext "Configuring elevated user privileges."; echo
		sed -i '20a\'${NAME}'	ALL=(ALL:ALL) ALL' /etc/sudoers
	fi

}

# Configure package sources and update the system, install or update packages
system_update() 
{
	
	# Variable for checking the contents of the /etc/apt/sources.list file
	local STRING=$(awk 'FNR == 5 {print $1, $2}' /etc/apt/sources.list)
	
	# if this file exists, then delete it
	if [ -f /etc/apt/sources.list.d/base.list ]; then
		rm /etc/apt/sources.list.d/base.list
	fi
	
	if [ "$STRING" = "deb cdrom:[Debian" ]; then
		gettext "Configuring package sources and update the system."; echo
		# check the status of network interfaces
		state_ifaces

		# configure package sources by editing the /etc/apt/sources.list file
		edit_sources_list
			
		# update the list of available packages
		apt update
			
		# upgrade the system by installing or updating packages
		apt -y upgrade
	else
		gettext "Package sources are is already configured."; echo
	fi

}

# Check the status of network interfaces
state_ifaces() 
{
	
	local STATE_FIRST_IFACE=$(ip a | awk 'FNR == 7 {print $9}')
	local STATE_SECOND_IFACE=$(ip a | awk 'FNR == 9 {print $9}')

	if [ "$STATE_FIRST_IFACE" = "DOWN" ] | [ "$STATE_SECOND_IFACE" = "DOWN" ]; then
		gettext "mare: network connection not established."; echo
		if [ "$STATE_FIRST_IFACE" = "DOWN" ]; then
			gettext "Perhaps the network cable disconnected."; echo
		fi
		if [ "$STATE_SECOND_IFACE" = "DOWN" ]; then
			gettext "You may have entered the wrong access point name or password."; echo
		fi
		exit 1
	fi

}

# Configure package sources by editing the /etc/apt/sources.list file
edit_sources_list() 
{

	local CDROM=$(sed -n '3p' /etc/apt/sources.list)
	local COUNTRY=0
	local MIRROR_LIST=0
	local MIRROR=0
	local AVG=0
	local WORD_LIGNTH=0
	local PREFIX=0
	local LIST=0
	local SITE=0
	
	# show list of countries in alphabetical order
	gettext "****************************** List of countries ******************************"; echo
	cat /usr/share/mare/countries.list
	
	while [ "$#" -eq 0 ]; do
		gettext "Enter your country: "
		read COUNTRY
		# assign a value to a variable
		MIRROR_LIST=$(sed -n '/'${COUNTRY}'/p' /usr/share/mare/mirror.list | awk 'FNR == 1 {print $1}')
		
		# check entered country by user in the /usr/share/mare/mirror.list file
		if [ "$MIRROR_LIST" = "$COUNTRY" ]; then
			echo ""
			gettext "****************** List of available mirrors ******************"; echo
			gettext "Country                Mirrors                    Ping"; echo
			echo "***************************************************************"
			
			# assign a value to a variable
			MIRROR=$(sed -n '/'${COUNTRY}'/p' /usr/share/mare/mirror.list | cut -d"/" -f3)
			
			# show the list of mirrors for the specified country
			for MIRROR in $MIRROR; do
				AVG=$(ping -c 5 ${MIRROR} | awk 'FNR == 10' | cut -d"/" -f6 )
				# Align the string in width. The entire string is 45 characters long.
				WORD_LIGNTH=$(echo "${MIRROR}" | wc -m)
				PREFIX=$(expr 41 - $WORD_LIGNTH)
				echo "${COUNTRY} ${MIRROR} ${AVG}" | awk '{printf "%-21s %s %'${PREFIX}'s\n", $1, $2, $3}'
			done
			
			echo -e "***************************************************************\n"
			
			# remove the previous value from the variable
			MIRROR=0
			
			while [ "$#" -eq 0 ]; do
				gettext "Enter the mirror: "
				read MIRROR
				# assign a value to a variable
				LIST=$(sed -n '/'$MIRROR'/p' /usr/share/mare/mirror.list | cut -d"/" -f3)
				
				# verify user input is correct
				if [ "$MIRROR" = "$LIST" ]; then
					# assign a value to a variable
					SITE=$(sed -n '/'${MIRROR}'/p' /usr/share/mare/mirror.list | awk 'FNR == 1 {print $2}')
					# get out of the loop
					break
				else
					gettext "Error! This mirror is not in the list of available mirrors."; echo
				fi
			done
			# get out of the loop
			break
		else
			gettext "Error! There is no mirror for your country."; echo
			gettext "Please indicate the country closest to you."; echo
		fi
	done
	
	# overwrite the contents of the specified file
	# based on the information received
	cat > /etc/apt/sources.list << EOF
# 

# ${CDROM}

# ${CDROM}

deb http://security.debian.org/debian-security buster/updates main contrib non-free
# deb-src http://security.debian.org/debian-security buster/updates main contrib non-free

deb ${SITE} buster-proposed-updates main contrib non-free
# deb-src ${SITE} buster-proposed-updates main contrib non-free

deb ${SITE} buster-updates main contrib non-free
# deb-src ${SITE} buster-updates main contrib non-free

deb ${SITE} buster main contrib non-free
# deb-src ${SITE} buster main contrib non-free
EOF
	
}

# Install micro programs for your operating system
install_micro_programs() 
{

	local AMD=$(lspci | grep VGA | awk '{print $9}')
	local CHECK_PACK=$(dpkg -l xserver-xorg-video-ati 2> /dev/null | awk 'FNR == 8 {print $2}')
	local NONFREE_PACK=$(dpkg -l firmware-linux-nonfree 2> /dev/null | awk 'FNR == 8 {print $2}')
	local LIBGLX_MESA=$(dpkg -l libglx-mesa0 2> /dev/null | awk 'FNR == 8 {print $2}')
	local CPU=$(lspci | grep Host | awk 'FNR == 2 {print $8}')

	echo ""
	gettext "Installing drivers for video cards from"; echo
	gettext "different manufacturers as well as microcode"; echo
	gettext "for Intel and AMD processors."; echo
	echo ""
	# Install free drivers for video cards AMD/ATI.
	# Installing free drivers for AMD/ATI video cards
	# is preferable, as they better support hardware  
	# acceleration in 3-D applications, which include
	# modern games.
	# Check if the xserver-xorg-video-ati package is
	# installed. This package depends on three
	# hardware-dependent driver packages:
	# xserver-xorg-video-mach64, xserver-xorg-video-r128
	# and xserver-xorg-video-radeon. The 
	# xserver-xorg-video-ati package automatically detects
	# whether your hardware has Radeon, Rage 128, or Mach64
	# and loads the appropriate driver.
	if [ "$AMD" = "[AMD/ATI]" ]; then
		if [ -n "$CHECK_PACK" ]; then
			gettext "The xserver-xorg-video-ati package is already installed."; echo
		else
			apt-get -y install xserver-xorg-video-ati
		fi

		# Check whether the package libglx-mesa0 is installed,
		# which in turn installs other packages related to it.
		if [ -n "$LIBGLX_MESA" ]; then
			gettext "The libglx-mesa0 package is already installed."; echo
		else
			apt-get -y install libglx-mesa0
		fi

		# Installing the binary package firmware-linux-nonfree.
		# Without this package, radeon driver users typically
		# experience poor 2D/3D performance. Some video cards
		# need this firmware to run the X Window System. 
		if [ -n "$NONFREE_PACK" ]; then
			gettext "The firmware-linux-nonfree package is already installed."; echo
		else
			apt-get -y install firmware-linux-nonfree
		fi
	fi

	# Install microcode patches for all AMD AMD64 processors.
	# AMD releases microcode patches to correct processor 
	# behavior as documented in. 
	if [ "$CPU" = "[AMD]" ]; then
	apt-get -y install amd64-microcode
	echo ""
	gettext "IT IS VERY IMPORTANT! If you are not running the"; echo
	gettext "X Window System, then restart the computer now."; echo
	gettext "Press enter ..."; read
	fi

	# Install updated system processor microcode for Intel
	# i686 and Intel X86-64 processors. Intel releases
	# microcode updates to correct processor behavior as
	# documented in the respective processor specification
	# updates. 
	if [ "$CPU" = "[Intel]" ]; then
		apt-get -y install intel-microcode
	fi

}

# Configure bootloader operating system
configure_grub() 
{
	
	# Variable for checking the contents of the  /etc/default/grub file
	local TIMEOUT=$(awk 'FNR == 7 {print}' /etc/default/grub)

	if [ "$TIMEOUT" = "GRUB_TIMEOUT=5" ]; then
		gettext "The operating system bootloader configurating."; echo
		sed -i '7i\GRUB_TIMEOUT_STYLE=hidden' /etc/default/grub
		sed -i 's/GRUB_TIMEOUT=5/GRUB_TIMEOUT=0/g' /etc/default/grub
		sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT="quiet"/GRUB_CMDLINE_LINUX_DEFAULT=""/g' /etc/default/grub
		update-grub > /dev/null
	else
		gettext "The operating system bootloader is already configured."; echo
	fi

}

# Configure filesystems table
configure_fstab() 
{

	local NUMBER=0
	local OPTIONS=0
	local STRING=0

	echo ""
	gettext "Here you can specify the parameters for mounting the hard"; echo
	gettext "drive to fine-tune them. Parameters: errors=remount-ro"; echo
	gettext "is best left unchanged. For example, you can specify them"; echo
	gettext "like this: rw,relatime,errors=remount-ro. See mount(8)"; echo
	gettext "for more information."; echo
	echo ""
	
	# show all lines of the file and number them
	sed -n -e '1,$p' -e '/$/=' /etc/fstab
	echo	

	while
		gettext "Enter string number («Q» - out): "
		read NUMBER
		[ $NUMBER != "q" ]; do
		gettext "Enter mount options: "
		read OPTIONS
		STRING=$(awk 'FNR == '${NUMBER}' {print $4}' /etc/fstab)
		sed -i 's/'${STRING}'/'${OPTIONS}'/g' /etc/fstab
	done

}

# Configure the dumping of pages of RAM into the swap partition and the amount of RAM allocated 
# for the cache (default values: vm.swappiness = 60, vm.vfs_cache_pressure = 100)
configure_paging_and_caching() 
{
	
	# Variables for checking the contents of the /etc/sysctl.conf file
	local SWAPPINESS=$(sysctl -a 2> /dev/null | grep vm.swappiness)
	local VFS_CACHE_PRESSURE=$(sysctl -a 2> /dev/null | grep vm.vfs_cache_pressure)

	if [ "$SWAPPINESS" = "vm.swappiness = 60" ] & [ "$VFS_CACHE_PRESSURE" = "vm.vfs_cache_pressure = 100" ]; then
		edit_sysctl_conf
	else
		gettext "Resetting RAM pages to the swap section and the amount"; echo
		gettext "of RAM allocated for the cache is already configured."; echo
	fi

}

# Edit the /etc/sysctl.conf file
edit_sysctl_conf() 
{
	
	# The variable shows the size of RAM in the operating system
	local MEM_TOTAL=$(free --mega | awk 'FNR == 2 {print $2}')
	
	gettext "Сonfiguring the reset of RAM pages to the swap partition"; echo
	gettext "and the amount of RAM allocated for the cache."; echo

	if [ "$MEM_TOTAL" -le 1200 ]; then
		sed -i '67a\ ' /etc/sysctl.conf
		sed -i '68a\vm.swappiness=30' /etc/sysctl.conf
		sed -i '69a\vm.vfs_cache_pressure=500' /etc/sysctl.conf
		gettext "Apply the following changes:"; echo
		sysctl -p
	elif [ "$MEM_TOTAL" -le 2200 ]; then
		sed -i '67a\ ' /etc/sysctl.conf
		sed -i '68a\vm.swappiness=5' /etc/sysctl.conf
		sed -i '69a\vm.vfs_cache_pressure=1000' /etc/sysctl.conf
		gettext "Apply the following changes:"; echo
		sysctl -p
	else
		sed -i '67a\ ' /etc/sysctl.conf
		sed -i '68a\vm.swappiness=3' /etc/sysctl.conf
		sed -i '69a\vm.vfs_cache_pressure=1000' /etc/sysctl.conf
		gettext "Apply the following changes:"; echo
		sysctl -p
	fi

}

# Install additional packages for Debian GNU/Linux
install_additional_packages() 
{
	
	local NUMBER=0
	local PACKAGE_NAME=0
	local FILE=0
	local FIREFOX_PACKAGE=$(dpkg -l 2> /dev/null | grep firefox-esr | awk 'FNR == 1 {print $2}')
	local LIBREOFFICE_CORE_PACKGE=$(dpkg -l 2> /dev/null | grep libreoffice-core | awk 'FNR == 1 {print $2}')
	local GIMP_PACKGE=$(dpkg -l 2> /dev/null | grep gimp | awk 'FNR == 1 {print $2}')

	echo ""
	gettext "Installing additional packages that are not shipped with"; echo
	gettext "the Debian GNU/Linux 10 operating system distribution kit."; echo
	gettext "You can select any package from the list for its subsequent"; echo
	gettext "installation."; echo

	# preparation for installing additional packages
	# create a directory to store temporary files
	mkdir -p /tmp/mare 
	# show a list of possible packages for installation
	possible_packages

	# create files containing package names for installation
	while
		gettext "Enter a package number («Q» - out): "
		read NUMBER 
		[ "$NUMBER" != "q" ]; do
		PACKAGE_NAME=$(dpkg -l 2> /dev/null | grep ${possible_packages[$NUMBER]} | awk 'FNR == 1 {print $2}')
		if [ "$PACKAGE_NAME" = "${possible_packages[$NUMBER]}" ]; then
			gettext "This package is already installed on your system."; echo
		else
			echo "${possible_packages[$NUMBER]}" > /tmp/mare/package$NUMBER
		fi
	done
	
	# installation of selected packages
	for package in {/tmp/mare/package*}; do
		FILE=$(cat /tmp/mare/package*)
		if [ "$FILE" = "skype" ]; then
			apt-get -y install snapd
			snap install skype --classic
		else
			apt-get -y install $FILE
		fi
	done
	
	# install help and localization packages for some programs according to
	# the regional settings of the system
	if [ -n "$FIREFOX_PACKAGE" ]; then
		apt-get -y install ${language_packs[$LANG,0]}
	fi

	if [ -n "$LIBREOFFICE_CORE_PACKGE" ]; then
		apt-get -y install ${language_packs[$LANG,1]}
	fi

	if [ -n "$LIBREOFFICE_CORE_PACKGE" ]; then
		apt-get -y install ${help_packs[$LANG,0]}
	fi
	
	if [ -n "$GIMP_PACKGE" ]; then
		apt-get -y install ${help_packs[$LANG,1]}
	fi
	
	# clean up garbage after installing packages
	gettext "Cleaning the system from unnecessary files and directories."; echo	
	rm -R /tmp/mare
	apt-get -y clean > /dev/null
		
}

# Show a list of possible packages for installation
possible_packages() 
{

	echo ""
	gettext "Number 0. Package: skype."; echo
	gettext "Short description: free proprietary software with closed source,"; echo
	gettext "providing text, voice and video communication over the Internet"; echo
	gettext "between computers. You can get a detailed description of this"; echo
	gettext "program by clicking on the following link:"; echo
	gettext "https://en.wikipedia.org/wiki/Skype"; echo
	gettext "Number 1.Package: chromium."; echo
	gettext "Short description: web browser."; echo
	gettext "You can get a detailed description of the package by entering"; echo
	gettext "the following at the command line: apt-cache show chromium."; echo
	gettext "Number 2. Package: chromium-l10n."; echo
	gettext "Short description: web browser localization."; echo
	gettext "You can get a detailed description of the package by entering"; echo
	gettext "the following at the command line: apt-cache show chromium-l10n."; echo
	gettext "Number 3. Package: transmission-gtk."; echo
	gettext "Short description: BitTorrent client (GTK + interface)."; echo
	gettext "You can get a detailed description of the package by entering"; echo
	gettext "the following at the command line: apt-cache show transmission-gtk."; echo
	gettext "Number 4. Package: brasero."; echo
	gettext "Short description: CD/DVD burning for GNOME."; echo
	gettext "You can get a detailed description of the package by entering"; echo
	gettext "the following at the command line: apt-cache show brasero."; echo
	gettext "Number 5. Package: gimp."; echo
	gettext "Short description: GNU Raster Image Editor."; echo
	gettext "You can get a detailed description of the package by entering"; echo
	gettext "the following at the command line: apt-cache show gimp."; echo
	gettext "Number 6. Package: blender."; echo
	gettext "Short description: fast and flexible system of three-dimensional"; echo
	gettext "modeling and rendering. You can get a detailed description of the"; echo
	gettext "package by entering the following at the command line:"; echo
	gettext "apt-cache show blender."; echo
	gettext "Number 7. Package: openshot."; echo
	gettext "Short description: create and edit videos and movies (transitional package)."; echo
	gettext "You can get a detailed description of the package by entering"; echo
	gettext "the following at the command line: apt-cache show openshot."; echo
	gettext "Number 8. Package: audacity."; echo
	gettext "Short description: fast cross platform sound editor."; echo
	gettext "You can get a detailed description of the package by entering"; echo
	gettext "the following at the command line: apt-cache show audacity."; echo
	gettext "Number 9. Package: mixxx."; echo
	gettext "Short description: Digital Disc Jockey Interface."
	gettext "You can get a detailed description of the package by entering"; echo
	gettext "the following at the command line: apt-cache show mixxx."; echo
	gettext "Number 10. Package: dmz-cursor-theme."; echo
	gettext "Short description: Style neutral, scalable cursor theme."
	gettext "You can get a detailed description of the package by entering"; echo
	gettext "the following at the command line: apt-cache show dmz-cursor-theme."; echo
	gettext "Number 11. Package: numix-gtk-theme."; echo
	gettext "Short description: modern flat theme from the Numix project."; echo
	gettext "You can get a detailed description of the package by entering"; echo
	gettext "the following at the command line: apt-cache show numix-gtk-theme."; echo
	gettext "Number 12. Package: adapta-gtk-theme."; echo
	gettext "Short description: Adaptive Gtk+ theme."; echo
	gettext "You can get a detailed description of the package by entering"; echo
	gettext "the following at the command line: apt-cache show adapta-gtk-theme."; echo
	gettext "Number 13. Package: materia-gtk-theme."; echo
	gettext "Short description: Material Design theme for GNOME/GTK+ based"; echo
	gettext "desktop environments. You can get a detailed description of the"; echo
	gettext "package by entering the following at the command line:"; echo
	gettext "apt-cache show materia-gtk-theme."; echo
	gettext "Number 14. Package: numix-icon-theme."; echo
	gettext "Short description: modern icon theme from the Numix project."; echo
	gettext "You can get a detailed description of the package by entering"; echo
	gettext "the following at the command line: apt-cache show numix-icon-theme."; echo
	gettext "Number 15. Package: numix-icon-theme-circle."; echo
	gettext "Short description: Circle icon theme from the Numix project."; echo
	gettext "You can get a detailed description of the package by entering"; echo
	gettext "the following at the command line: apt-cache show numix-icon-theme-circle."; echo
	gettext "Number 16. Package: gnome-brave-icon-theme."; echo
	gettext "Short description: blue variant of Gnome-colors icon theme."; echo
	gettext "You can get a detailed description of the package by entering"; echo
	gettext "the following at the command line: apt-cache show gnome-brave-icon-theme."; echo
	gettext "Number 17. Package: gnome-dust-icon-theme."; echo
	gettext "Short description: chocolate variant of the GNOME-Colors icon theme."; echo
	gettext "You can get a detailed description of the package by entering"; echo
	gettext "the following at the command line: apt-cache show gnome-dust-icon-theme."; echo
	gettext "Number 18. Package: gnome-human-icon-theme."; echo
	gettext "Short description: orange variant of the GNOME-Colors icon theme."; echo
	gettext "You can get a detailed description of the package by entering"; echo
	gettext "the following at the command line: apt-cache show gnome-human-icon-theme."; echo
	gettext "Number 19. Package: gnome-illustrious-icon-theme."; echo
	gettext "Short description: pink variant of the GNOME-Colors icon theme."; echo
	gettext "You can get a detailed description of the package by entering"; echo
	gettext "the following at the command line: apt-cache show gnome-illustrious-icon-theme."; echo
	gettext "Number 20. Package: gnome-noble-icon-theme."; echo
	gettext "Short description: purple variant of the GNOME-Colors icon theme."; echo
	gettext "You can get a detailed description of the package by entering"; echo
	gettext "the following at the command line: apt-cache show gnome-noble-icon-theme."; echo
	gettext "Number 21. Package: gnome-wine-icon-theme."; echo
	gettext "Short description: red variant of the GNOME-Colors icon theme."; echo
	gettext "You can get a detailed description of the package by entering"; echo
	gettext "the following at the command line: apt-cache show gnome-wine-icon-theme."; echo
	gettext "Number 22. Package: gnome-wise-icon-theme."; echo
	gettext "Short description: green variant of the GNOME-Colors icon theme."; echo
	gettext "You can get a detailed description of the package by entering"; echo
	gettext "the following at the command line: apt-cache show gnome-wise-icon-theme."; echo
	gettext "Number 23. Package: human-icon-theme."; echo
	gettext "Short description: Human Icon theme."; echo
	gettext "You can get a detailed description of the package by entering"; echo
	gettext "the following at the command line: apt-cache show human-icon-theme."; echo
	gettext "Number 24. Package: bleachbit."; echo
	gettext "Short description: delete unnecessary files from the system."; echo
	gettext "You can get a detailed description of the package by entering"; echo
	gettext "the following at the command line: apt-cache show bleachbit."; echo
	gettext "Number 25. Package: catfish."; echo
	gettext "Short description: tool for find files, which is customizable a command line."; echo
	gettext "You can get a detailed description of the package by entering"; echo
	gettext "the following at the command line: apt-cache show catfish."; echo
	gettext "Number 26. Package: screenfetch."; echo
	gettext "Short description: Bash Screenshot Information Tool."; echo
	gettext "You can get a detailed description of the package by entering"; echo
	gettext "the following at the command line: apt-cache show screenfetch."; echo
	gettext "Number 27. Package: inxi."; echo
	gettext "Short description: full featured system information script."; echo
	gettext "You can get a detailed description of the package by entering"; echo
	gettext "the following at the command line: apt-cache show inxi."; echo
	gettext "Number 28. Package: lshw."; echo
	gettext "Short description: hardware configuration information."; echo
	gettext "You can get a detailed description of the package by entering"; echo
	gettext "the following at the command line: apt-cache show lshw."; echo
	gettext "Number 29. Package: net-tools."; echo
	gettext "Short description: toolkit for NET-3."; echo
	gettext "You can get a detailed description of the package by entering"; echo
	gettext "the following at the command line: apt-cache show net-tools."; echo
	gettext "Number 30. Package: gvfs-backends."; echo
	gettext "Short description: user space virtual file system - drivers."; echo
	gettext "You can get a detailed description of the package by entering"; echo
	gettext "the following at the command line: apt-cache show gvfs-backends."; echo
	gettext "Number 31. Package: unrar."; echo
	gettext "Short description: unarchiver for .rar files (non-free version)."; echo
	gettext "You can get a detailed description of the package by entering"; echo
	gettext "the following at the command line: apt-cache show unrar."; echo
	gettext "Number 32. Package: lightdm-gtk-greeter-settings."; echo
	gettext "Short description: settings editor for the LightDM GTK+ Greeter."; echo
	gettext "You can get a detailed description of the package by entering"; echo
	gettext "the following at the command line: apt-cache show lightdm-gtk-greeter-settings."; echo
	gettext "Number 33. Package: dconf-editor."; echo
	gettext "Short description: simple settings storage system - graphical interface."; echo
	gettext "You can get a detailed description of the package by entering"; echo
	gettext "the following at the command line: apt-cache show dconf-editor."; echo
	gettext "Number 34. Package: ttf-mscorefonts-installer."; echo
	gettext "Short description: installer for Microsoft TrueType core fonts."; echo
	gettext "You can get a detailed description of the package by entering"; echo
	gettext "the following at the command line: apt-cache show ttf-mscorefonts-installer."; echo
	gettext "Number 35. Package: font-freefont-ttf."; echo
	gettext "Short description: free Serif, Sans, and Mono fonts in TrueType format."; echo
	gettext "You can get a detailed description of the package by entering"; echo
	gettext "the following at the command line: apt-cache show font-freefont-ttf."; echo
	gettext "Number 36. Package: fonts-noto."; echo
	gettext "Short description: metapackage to pull in all Noto fonts."; echo
	gettext "You can get a detailed description of the package by entering"; echo
	gettext "the following at the command line: apt-cache show fonts-noto."; echo
	gettext "Number 37. Package: fonts-noto-core."; echo
	gettext "Short description: 'No Tofu' font families with large Unicode coverage"; echo
	gettext "(core). You can get a detailed description of the package by entering"; echo
	gettext "the following at the command line: apt-cache show fonts-noto-core."; echo
	gettext "Number 38. Package: fonts-noto-extra."; echo
	gettext "Short description: 'No Tofu' font families with large Unicode coverage"; echo
	gettext "(extra). You can get a detailed description of the package by entering"; echo
	gettext "the following at the command line: apt-cache show fonts-noto-extra."; echo
	echo ""

}

# Preparing to install additional codecs
preparing_to_install_additional_codecs() 
{
	
	local MMEDIA_KEYRING_PACKAGE=$(dpkg -l 2> /dev/null | grep deb-multimedia-keyring | awk '{print $2}')
	local STRING_MMEDIA=$(sed -n '19,20p' /etc/apt/sources.list)
	local SITE_MMEDIA="http://www.deb-multimedia.org"

	echo ""
	gettext "Preparing to install additional codecs that are not"; echo
	gettext "shipped with the Debian GNU/Linux 10 operating system"; echo
	gettext "distribution."; echo
	echo ""

	# check contents of sources.list file
	# if the necessary lines exist in it, then inform the user about it
	if [ -n "$STRING_MMEDIA" ]; then
		gettext "The www.deb-multimedia.org website has already"; echo
		gettext "been added to the /etc/apt/sources.list file."; echo
	# otherwise edit the sources.list file
	else
		sed -i '17a\ ' /etc/apt/sources.list
		sed -i '18a\deb '${SITE_MMEDIA}' buster main non-free' /etc/apt/sources.list
		sed -i '19a\# deb-src '${SITE_MMEDIA}' buster main non-free' /etc/apt/sources.list
	fi

	# check if the package is installed
	# if the package is installed, then inform the user about it
	if [ -n "$MMEDIA_KEYRING_PACKAGE" ]; then
		gettext "The deb-multimedia-keyring package is already installed on your system."; echo
	else
		
		# create a directory to store temporary files
		mkdir -p /tmp/dpkg 
		# change current working directory to /tmp/dpkg
		cd /tmp/dpkg
		# download the deb-multimedia-keyring package to the current working directory
		wget $SITE_MMEDIA/pool/main/d/deb-multimedia-keyring/deb-multimedia-keyring_2016.8.1_all.deb
		
		# return to user home directory
		cd
		# install the deb-multimedia-keyring package
		dpkg -i /tmp/dpkg/deb-multimedia-keyring_2016.8.1_all.deb
		
		# update the list of available packages
		apt update > /dev/null
		# install additional codecs
		install_additional_codecs
		
		# clean up garbage after installing packages
		gettext "Cleaning the system from unnecessary files and directories."; echo
		rm -R /tmp/dpkg
		apt-get -y clean > /dev/null
	fi
	
}

# Install additional codecs
install_additional_codecs() 
{
	
	local SYS_ARCH=$(dmesg 2> /dev/null | grep architecture | awk '{print $6}')
	local FIREFOX_PACKAGE=$(dpkg -l 2> /dev/null | grep firefox-esr | awk 'FNR == 1 {print $2}')
	local CHROMIUM_PACKAGE=$(dpkg -l 2> /dev/null | grep chromium | awk 'FNR == 1 {print $2}')
	
	apt-get update
	apt-get -y upgrade

	case "$SYS_ARCH" in
		x86. )
		apt-get -y install w32codecs
		;;
		x86-64. )
		apt-get -y install w64codecs
		;;
	esac
	
	if [ -n "$FIREFOX_PACKAGE" ]; then
		apt-get -y install flashplayer-mozilla
	fi

	if [ -n "$CHROMIUM_PACKAGE" ]; then
		apt-get -y install flashplayer-chromium
	fi
	
	for possible_codecs in ${possible_codecs[*]}; do
		apt-get -y install $possible_codecs
	done

}

# Configure Message of the Day in Debian GNU/Linux
configure_motd() 
{

	# preparing to customize the message of the day in Debian GNU/Linux
	preparation_for_set_motd

	if [ -f /etc/update-motd.d/00-welcome-header ]; then
		chmod +x /etc/update-motd.d/00-welcome-header
	fi

	if [ -f /etc/update-motd.d/10-system-info ]; then
		chmod +x /etc/update-motd.d/10-system-info
	fi

	if [ -f /etc/update-motd.d/20-connect-info ]; then
		chmod +x /etc/update-motd.d/20-connect-info
	fi
			
}

# Preparing to customize the message of the day in Debian GNU/Linux
preparation_for_set_motd() 
{

	local LOGIN=$(awk 'FNR == 91 {print}' /etc/pam.d/login)

	echo ""
	gettext "Setting up a dynamic message of the day. This is necessary"; echo
	gettext "so that your console, after authentication, displays a"; echo
	gettext "greeting and useful information about your operating system."; echo
	echo ""

	# check file contents
	# if the file is not empty, clear it
	if [ -s /etc/motd ]; then
		cat /dev/null > /etc/motd
	fi

	if [ -x /etc/update-motd.d/10-uname ]; then
		chmod -x /etc/update-motd.d/10-uname
	fi

	# check priority of message output of the day
	# if the message about the last user authentication is displayed before the message  
	# of the day, prompt the user to fix this by editing the /etc/pam.d/login file
	if [ "$LOGIN" = "session    optional   pam_lastlog.so" ]; then
		gettext "Now in the console, the message about the last user"; echo
		gettext "authentication is displayed before the message of the day."; echo; echo
		edit_login
	# otherwise display a message that the message of the day is displayed 
	# before the message about the last user authentication
	else
		gettext "Now in the console, the message of the day is displayed"; echo
		gettext "before the message about the last user authentication."; echo; echo
	fi
	
}

# Edit the /etc/pam.d/login file
edit_login() 
{
	
	local CHAR=0

	while
		gettext "Display message of the day first? (y or n): "
		read CHAR
		[ "$CHAR" != "n" ]; do
		if [ "$CHAR" = "y" ]; then 
			sed -i '100i\# Prints the last login info upon successful login' /etc/pam.d/login
			sed -i '101i\# (Replaces the "LASTLOG_ENAB" option from login.defs)' /etc/pam.d/login
			sed -i '102i\session    optional   pam_lastlog.so' /etc/pam.d/login
			sed -i '103i\ ' /etc/pam.d/login
			sed -i '89,92d' /etc/pam.d/login
			break
		else
			gettext "Error! You have entered an invalid character."; echo
		fi
	done
	
}

# Configure the LightDM display manager
configure_dm() 
{
	
	local LIGHTDM=$(dpkg -l 2> /dev/null | grep lightdm | awk 'FNR == 2 {print $2}')

	# enable numlock by default for LightDM
	if [ -n "$LIGHTDM" ]; then
		gettext "Setting up the Light Display Manager."; echo
		if [ -f /usr/bin/numlockx ]; then
			gettext "The numlockx package is already installed on your system."; echo
		else
			apt-get -y install numlockx
		fi
	
		if [ -f /usr/share/lightdm/lightdm.conf.d/01_user.conf ]; then
			gettext "The configuration file for LightDM already exists."; echo
		else
			echo " " > /usr/share/lightdm/lightdm.conf.d/01_user.conf
			sed -i '1c\[Seat:*]' /usr/share/lightdm/lightdm.conf.d/01_user.conf
			sed -i '1a\greeter-setup-script=/usr/bin/numlockx on' /usr/share/lightdm/lightdm.conf.d/01_user.conf
		fi
	fi

}

# Show a brief help on the commands for the Mare script
usage() 
{

	gettext "Usage: mare [OPTION]"; echo; echo
	gettext "Performs various settings in Debian GNU/Linux 10 after installation."; echo
	gettext "Namely:"; echo
	gettext "  configures wireless network;"; echo
	gettext "  creates a new Wi-Fi connection after rebooting the system;"; echo
	gettext "  configures elevated privileges for the user;"; echo
	gettext "  configures packages sources and update"; echo
	gettext "  the system by updating packages;"; echo
	gettext "  installs micro programs for your system;"; echo
	gettext "  configures the bootloader of the operating system;"; echo
	gettext "  configures filesystems table;"; echo
	gettext "  improves system performance;"; echo
	gettext "  sets up additional packages;"; echo
	gettext "  sets up additional codecs;"; echo
	gettext "  configures the message of the day;"; echo
	gettext "  configures the LightDM display manager."; echo; echo
	gettext "  -w --wifi    configure wireless network and exit"; echo
	gettext "  -s --small   small configuring the operating system"; echo 
	gettext "  -b --big     big configuring the operating system"; echo
	gettext "  -f --full    full configuring the operating system"; echo; echo
	gettext "  -h --help    show this help and exit"; echo
	gettext "  -v --version show version information and exit"; echo; echo
	gettext "Example:"; echo
	gettext "  mare -s Small configuring the operating system."; echo
	# gettext "Report bugs at the address <bug-mare@gmail.com>"; echo     

}

# Show the Mare script version
release() 
{

	gettext "Mare version 3.0"; echo; echo
	gettext "Copyright (C) 2019 - 2020 Alexandre Popov. All rights reserved."; echo
	gettext "License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>."; echo
	gettext "This is free software: you are free to change and redistribute it."; echo
	gettext "There is NO WARRANTY, to the extent permitted by law."; echo
	
}

###################### BEGIN ######################

if [ "$DETECT" != "Debian GNU/Linux 10" ]; then
	gettext "mare: you are using a different distribution GNU/Linux."; echo
	exit 1
fi

# Usage
while [ "$#" -gt 0 ]; do

	case "$1" in
		-w | --wifi )
		configure_wireless_network
		;;
		-s | --small )
		create_connection
		configure_sudo
		system_update
		install_micro_programs
		;;
		-b | --big )
		configure_grub
		configure_fstab
		configure_paging_and_caching
		install_additional_packages
		preparing_to_install_additional_codecs
		configure_motd
		configure_dm
		;;
		-f | --full )
		create_connection
		configure_sudo
		system_update
		install_micro_programs
		configure_grub
		configure_fstab
		configure_paging_and_caching
		install_additional_packages
		preparing_to_install_additional_codecs
		configure_motd
		configure_dm
		;;
		-h | --help )
		usage
		exit 0 
		;;
		-v | --version )
		release
		exit 0 
		;;
		-* )
		gettext "mare: wrong key — "; echo "«$1»."
		gettext "On command «mare --help» one can get additional information."; echo 
		exit 1
    	;;
    	--* )
		gettext "mare: wrong key — "; echo "«$1»."
		gettext "On command «mare --help» one can get additional information."; echo 
		exit 1
    	;;
	esac
	break

done

if [ -z "$COMMAND" ]; then
	gettext "Welcome to the setup wizard for your system."; echo
	gettext "For help using the wizard, enter the command:"; echo
	echo "mare --help."
	release | sed -n '2,$p'
	exit 1
fi
shift

###################### END ######################
