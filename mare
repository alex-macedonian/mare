#!/bin/bash
#
# mare - tool the home computer setup
#
# Copyright (C) 2019 - 2020 Alexandre Popov <consiorp@gmail.com>.
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

LC_ALL=C
export LC_ALL

check_root()
{
	local USER_ID=$(id -u)
	
	if [ "$USER_ID" = "0" ]; then
		check_pycurl_module
	else
		echo "`basename $0:` root is not found"
		echo "Run the mare script as root."
		exit 1
	fi
}

check_pycurl_module()
{
	if [ -f /usr/lib/python3/dist-packages/pycurl.cpython-*-linux-gnu.so ]; then
		check_file_size
		check_shell
	else
		echo "`basename $0:` the python3-pycurl package is not found"
		echo "Please install the python3-pycurl package for the script"
		echo "to work correctly."
		exit 1
	fi
}

check_file_size()
{
	local FILE_SIZE=$(cat /usr/share/mare/version.list | head -n1)
	
	if [ -z "$FILE_SIZE" ]; then
		check_utils >> /usr/share/mare/version.list
	fi
}

# Check used tools for their presence in the operating system
check_utils()
{
	local SH=0
	local COREUTILS=0
	local PERL=0
	local PROCPS=0
	local PCIITILS=0
	local USBUTILS=0

	if [ "$SHELL" = "/bin/bash" ]; then
		bash --version | head -n1 | cut -d" " -f2-4
	else
		echo "`basename $0:` bash is not found"
	fi

	SH=$(readlink -f /bin/sh)
	echo "/bin/sh link to ${SH}"
	
	if [ -x /usr/bin/lsb_release ]; then
		lsb_release -si
	else
		echo "`basename $0:` lsb_release is not found"
	fi

	COREUTILS=$(chmod --version | head -n1 | cut -d")" -f2)
	echo "GNU coreutils ${COREUTILS}"
	find --version | head -n1
	
	if [ -x /usr/bin/apt ]; then
		apt --version | head -n1 | cut -d"(" -f1
	else
		echo "`basename $0:` apt is not found"
	fi
	
	if [ -x /usr/bin/dpkg ]; then
		echo "dpkg `/usr/bin/dpkg --version | head -n1 | cut -d" " -f7`"
	else
		echo "`basename $0:` dpkg is not found"
	fi
	
	if [ -h /usr/bin/awk ]; then
  		echo "/usr/bin/awk link to `readlink -f /usr/bin/awk`"
	elif [ -x /usr/bin/awk ]; then
  		echo "awk `/usr/bin/awk --version | head -n1`"
  	elif [ -x /usr/bin/gawk ]; then
  		echo "gawk `/usr/bin/gawk --version | head -n1`"
	else 
  		echo "`basename $0:` awk is not found" 
	fi
	
	sed --version | head -n1
	wget --version | head -n1 | cut -d" " -f1-3
	update-grub --version
	grep --version | head -n1
	python3 --version
	ip -Version

	PROCPS=$(free --version | cut -d" " -f4)
	echo "Procps ${PROCPS}"
	PCIUTILS=$(lspci --version | cut -d" " -f3)
	echo "PCI utils ${PCIUTILS}"
	USBUTILS=$(lsusb --version | cut -d" " -f3)
	echo "USB utils ${USBUTILS}"
}

check_shell()
{
	local BASH=$(grep "mare: bash is" /usr/share/mare/version.list)
	
	if [ -z "$BASH" ]; then
		check_package_manager
	else
		echo "`basename $0:` this script only works with bash"
		exit 1
	fi
}

check_package_manager()
{
	local PACKAGE_MANAGER=$(grep "^m*a" /usr/share/mare/version.list)
	
	if [ -z "$PACKAGE_MANAGER" ]; then
		check_distribution
	else
		echo "`basename $0:` you are using a different package manager"
		exit 1
	fi
}

check_distribution()
{
	local DISTRO=$(awk '{if (($1 ~ "Debian") || ($1 ~ "LMDE")) {print $1}}' /usr/share/mare/version.list)

	if [ -n "$DISTRO" ]; then
		usage
	else
		echo "`basename $0:` you are using a different distribution GNU/Linux"
		exit 1
	fi
}

usage()
{
	local COMMAND="$1"

	while [ "$#" -gt 0 ]; do
		case "$1" in
			-s | --sudo
			/usr/lib/mare/sudo.sh
			;;
			-m | --motd )
			/usr/lib/mare/motd.sh
			;;
			-r | --rest )
			/usr/lib/mare/sources.py
			/usr/lib/mare/netman.sh
			/usr/lib/mare/grub.sh
			/usr/lib/mare/optimization.sh
			/usr/lib/mare/packages.sh
			/usr/lib/mare/codecs.sh
			/usr/lib/mare/dm.sh
			/usr/lib/mare/nvidia.sh
			;;
			-h | --help )
			cat /usr/share/mare/usage.list
			exit 0 
			;;
			-v | --version )
			cat /usr/share/mare/release.list
			exit 0 
			;;
			* )
			echo "`basename $0:` wrong key — «$1»"
			echo "On command «mare --help» one can get additional information."
			exit 1
    		;;
    	esac
		break
	done

	if [ -z "$COMMAND" ]; then
		echo "`basename $0:` indicate required action"
		echo "For help using the program, enter the command:"
		echo "mare -h or mare --help."
		exit 1
	fi
	shift
}

main()
{
	check_root
}

main
